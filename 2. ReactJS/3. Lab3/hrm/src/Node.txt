-- Java Script cấu trúc lỏng lẻo => Sinh ra TypeScript
-- TypeScript có tính hướng đối tượng

-- TypeScript & JavaScripts Advanced

-- ReactJS`


3. Tạo class
    + Thuộc tính, phương thức
    + Getter, setter, constructor

4. Các cách khai báo hàm trong JavaScripts
    + 3 cách..
    Function, Khai báo biến, Arrow

5. Export
    + Export theo từng thành phần: export{}
    + Export theo từng thành phần: Để từ khóa export trước thành phần đó
    + Export default.. Export duy nhất 1 thành phần,  khi dùng thì có thể dùng alias

6. Cacs vòng lặp hay dùng
    + for i, forEach, forin for of, map

7. Var, let, const
    var: Redeclare, hosting
    let

8. Destructuring, Spread...

9. HOF Higher Order Function => Hàm cấp cao
    là 1 hàm trong Js có thể nhận 1 hàm khác là tham số đầu vào
    sau khi xử lý xong có thể trả ra 1 hàm mới

10. Bất đồng bộ trong Js
    Giải quyết callback hell
    -Promise
    -Asyn/Await

22. ReactJS
    1. Chia nhỏ để quản lý
    2. Tái sử dụng code (Component)


    1. Làm thế nào để tạo ra các Component
        - Cài đặt công cụ:
            npm install -g create-react-app
        -Tạo Project
            create-react-app nameProject
        -Chạy Project
            npm start
        - Sử dụng CSS trong React
            C1: Css trong thẻ luôn vd: {style: {color: "red"}}
            C2: CSS in file
            C3: Tạo ra file CSS => import


        -JSX

    Làm sao để Style cho các Component đó

    2. Truyền dữ lieu giữa các Component
        -Truyền từ cha xuống con: props(properties) => key- value
            + this.props.teenProps
            + props.tênProps
        -Truyền từ con sang cha
            + Sử dụng Callback()
            => Khai báo hàm Callback tại cha
            => Truyền hàm vừa khai báo thông qua Props xuống con
            => Gọi hàm Callback bên component con
            => Nếu muốn đẩy thêm dữ liệu thì sử dụng tham số của hàm Callback

        -Truyền từ con sang con(đông cấp)
            -không truyền trực tiếp đc, cần qua 1 component trung gian

        - Truyền dữ liệu qua nhiều tầng
            + SỬ dụng props thông qua từng tầng
            + Context (provider, consumer)

    3. State: + Giống như 1 biến trong class Component => Mỗi khi state thay đổi thì component sẽ re-render lại(load lại)
            + Chỉ sử dụng đc trong class Component

    4. Lấy dữ liệu từ form nhập liệu
        - Khai báo các State quản lý các dữ liệu các ô nhập liệu tương ứng
        - bắt sự kiên onChange => viết hàm handleChange để quản lý;
        - Lấy dữ liệu từ ô nhập liệu = event.target.value

    5. Thư viện khi làm UI
        - ReactTRap (~~ Bootstrap)
        - Material UI
        - Ant Design

    6. UI Component, Container Component
        UI Component : Hiển thị dữ liệu
        Container Component : Xử lý dữ liệu, xử lý logic =>> Đưa vào UI Component để hiển thị

    7. Lifecycle
        - Chỉ có trong class component
        - Vòng đời của 1 component
        -
        Mounting
            constructor()
            render()
            componentDidMount()

        Updating
            render()
            componentDidUpdate()

        Unmounting
            componentWillUnmount()

    8. Hook (Function Component only)
        - useState(): Giúp quản lý State trong Function component;
        - useEffect(): Giúp quản lý trạng thái của Function Component(Gần giống Lifecycle)
            useEffect(Function, [dependencies])
            Cách viết của useEffect ảnh hưởng thế nào tới quá trình gọi các đoạn code trong nó
            + Cách 1
                useEffect(()=> {
                    console.log("abc")
                });
                =>> tương đương componentDidMount và componentDidUpdate

            + Cách 2
                   useEffect(()=> {
                    console.log("abc")
                }, [dependencies]);
                =>> tương đương componentDidMount và componentDidUpdate (Chỉ đc gọi khi dependencies thay đổi)

            + Cách 3
                useEffect(()=> {
                    console.log("abc")
                }, []);
                =>> Tương đương Component did mount chi load 1 lan khi chuong trinh dc chay.Des


            + Cách 4
            useEffect(() => {
                return () => {
                    console.log("Code 4");
                };
            });
            =>> Tương đương componentWillUnmount
        - useContext():
        - useReducer():

    9. Làm việc với API
    =>> 1 trong 2 thư viện: Axios, Fetch
    Call API từ React tới Back end
    Axios:
    => Xử lý bất đồng bộ khi Call API

    Promise: .then, .catch

    Asyn Await: Asyn, Await

    10. React Router-dom
    npm install react-router-dom

    Link
    NavLink auto them class active cho the de css

    Link qua trang khác để làm detail = param này kia
    param: useParam()

    11. Redux
    - Sử dụng để quản lý các State: Golbal
    + Store
    + Reducer
    + Action

    -Redux Core
    -Redux Core -React

    npm install redux react-redux --save

    useSelector =>> lấy các state đc quản lý bởi Store